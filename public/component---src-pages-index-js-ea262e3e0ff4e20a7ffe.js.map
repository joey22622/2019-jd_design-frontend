{"version":3,"sources":["webpack:///./src/components/portfolioGrid.js","webpack:///./src/pages/index.js"],"names":["PortfolioGrid","state","thumbnails","oldLength","newLength","toggleGIF","i","remote","src","remoteStatic","setState","buildThumbArr","props","query","map","elem","thumb","image","checkVar","node","imgThumb","console","log","index","gif","fluid","local","asset","slug","current","type","projectType","title","client","push","handleDims","a","b","e","componentDidMount","this","render","className","length","item","key","style","data","thumbnail","to","onMouseOver","onMouseOut","React","Component","IndexPage","bodyClass","dimmensions","homeLink","document","querySelector","w","offsetWidth","wToH","height","window","addEventListener","allSanityProject","edges","home","taxonomies","coverPage","pageState"],"mappings":"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","file":"component---src-pages-index-js-ea262e3e0ff4e20a7ffe.js","sourcesContent":["import React from 'react'\nimport Image from 'gatsby-image'\nimport {Link} from 'gatsby'\n\nclass PortfolioGrid extends React.Component {\n    state ={\n        thumbnails : [],\n        oldLength : 0,\n        newLength : 0\n    }\n    componentDidMount() {\n        this.buildThumbArr()\n    }\n    toggleGIF = (i) => {\n        // alert(\"hi\");\n        // alert(\"index \" + i)\n        let thumbnails = this.state.thumbnails;\n        if(thumbnails[i].remote === thumbnails[i].src){\n          thumbnails[i].src = thumbnails[i].remoteStatic\n        } else {\n           thumbnails[i].src = thumbnails[i].remote\n        }\n        this.setState({thumbnails});\n      }\n    buildThumbArr = () => {\n        let thumbnails = []\n\n        if(this.props.query){\n            this.props.query.map((elem, i) => {\n                let thumb = {};\n                const image = this.checkVar(()=> elem.node.imgThumb, false)\n                const remote = this.checkVar(()=> image.remote, false)\n                console.log(image)\n                thumb.index = i;\n                thumb.gif = false;\n                thumb.fluid = this.checkVar(()=> image.local.asset.fluid, false)\n\n                if(remote){\n                    thumb.gif = true;\n                    thumb.remote = this.checkVar(()=> image.remote, `#`)\n                    thumb.remoteStatic = this.checkVar(()=> image.remoteStatic, `#`)\n                    thumb.src = this.checkVar(()=> image.remoteStatic, `#`)\n                } else {\n                  thumb.src = ``\n                }\n\n                thumb.slug = this.checkVar(()=> elem.node.slug.current, `#`)\n                thumb.type =  this.checkVar(()=> elem.node.projectType.title, ``)\n                thumb.title = this.checkVar(()=> elem.node.title, ``)\n                thumb.client = this.checkVar(()=> elem.node.client.title, ``)\n                thumbnails.push(thumb);  \n            })\n            this.setState({thumbnails},this.props.handleDims);\n        }\n    }\n    checkVar = (a, b) => {  \n        try{\n          return a()\n        } catch (e) {\n          return b\n        }\n      }\n    \n    render(){\n    return(\n      <ul className=\"project-index\">\n\n      {this.state.thumbnails.length > 0 && this.state.thumbnails.map((item, i)=>(\n        <li className=\"project-link\" key={item.index} style={this.props.data.thumbnail.style}>\n          <Link to={`/${item.slug}`}>\n\n          <div className=\"project-link-outer\">\n            <div className=\"project-link-inner\">\n              {\n              item.gif ?\n              (<div className=\"project-thumbnail\" onMouseOver={()=>{this.toggleGIF(i)}} onMouseOut={()=>{this.toggleGIF(i)}}><img src={item.src}/></div>)\n              :\n              item.fluid && <Image key={i} className=\"project-thumbnail\" fluid={item.fluid}/>\n              }\n              <div className=\"text-wrap-outer\">\n                <div className=\"text-wrap-inner\">\n                  <p className=\"project-text\">\n                    <span className=\"project-cat\">{item.type} : </span>\n                    <span className=\"project-title\">{item.title}</span>\n                  </p>\n                  <p className=\"project-client\">{item.client}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          </Link>\n        </li>\n\n      ))}\n        </ul>\n    )\n    }\n}\n\nexport default PortfolioGrid;","import React from \"react\"\nimport {StaticQuery, graphql, Link } from \"gatsby\"\n// import Image from 'gatsby-image'\nimport Layout from \"../components/layout\"\n// import Image from \"../components/image\"\nimport SEO from \"../components/seo\"\nimport PortfolioGrid from \"../components/portfolioGrid\"\n\n\n// const IndexPage = ( props) => (\n  class IndexPage extends React.Component{\n\n    state = {\n      bodyClass : '',\n      thumbnail : {\n        style : {}\n      },\n      dimmensions : {\n        thumbnail : {}\n      },\n      homeLink : \"/\"\n    }\n    checkVar = (a, b) => {\n      try{\n        return a()\n      } catch (e) {\n        return b\n      }\n    }\n    componentDidMount(){\n      window.addEventListener('resize', ()=>{\n        this.handleDims()\n      });\n      this.handleDims()\n    }\n    handleDims = () =>{\n      let dimmensions = this.state.dimmensions;\n      const thumb = this.checkVar(()=> document.querySelector(\".project-link\"),false);\n      if(thumb){\n        dimmensions.thumbnail = {\n          w : thumb.offsetWidth\n        }\n        // console.log(\"dimsHandled\")\n        this.setState({dimmensions},()=>{\n          //dimmension dependent callbacks\n          this.wToH()\n        })\n      }\n    }\n    wToH = () => {\n      const thumb = this.state.thumbnail;\n      thumb.style = {\n        height : this.state.dimmensions.thumbnail.w\n      }\n      this.setState({thumb})\n\n    }\n\n\n\n  render(){\n\n    return (\n    <StaticQuery\n    query={graphql`\n      {\n        allSanityProject (\n          sort: {\n        fields: [publishedAt]\n        order: DESC\n      }\n      ){\n          edges {\n            node {\n              imgImage {\n                _key\n                _type\n                local {\n                  asset {\n                    fluid{\n                      ...GatsbySanityImageFluid\n                    }\n                  }\n                }\n                title\n                remote\n                remoteStatic\n              }\n              imgThumb {\n                _key\n                _type\n                local {\n                  asset {\n                    fluid{\n                      ...GatsbySanityImageFluid\n                    }\n                  }\n                }\n                title\n                remote\n                remoteStatic\n              }\n              imgGallery {\n                _key\n                _type\n                caption\n              }\n              id\n              title\n              slug {\n                _key\n                _type\n                current\n              }\n              projectType {\n                title\n              }\n              client {\n                title\n              }\n            }\n          }\n        }\n      } \n      `}\n  \n     render={data => {\n       const query = data.allSanityProject.edges\n       console.log(data)\n       \n\nreturn(\n    <Layout\n    // pathname={window.location.pathname}\n    // search={window.location.search}\n    home={true}\n    bodyClass={'home'}\n    // homeLink={this.state.homeLink}\n    taxonomies={\"\"}\n    coverPage={true}\n    data={\n      <PortfolioGrid\n      data = {this.state}\n      query = {query}\n      wToH = {this.wToH}\n      handleDims = {this.handleDims}\n      />\n    }\n    coverPage={true}\n    pageState = {this.state}\n    >\n\n      \n      <SEO title=\"Home\" />\n\n  </Layout>\n)\n     }}\n  />\n    )\n    }\n}\n\nexport default IndexPage\n\n\n"],"sourceRoot":""}