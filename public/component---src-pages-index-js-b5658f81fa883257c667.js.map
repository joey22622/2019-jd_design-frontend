{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["IndexPage","state","bodyClass","thumbnail","style","dimmensions","homeLink","checkVar","a","b","e","handleDims","thumb","document","querySelector","w","offsetWidth","setState","wToH","height","componentDidMount","window","addEventListener","this","render","query","data","allSanityProject","edges","home","taxonomies","coverPage","className","map","item","i","img","node","imgImage","local","asset","fluid","key","id","to","slug","current","projectType","title","client","pageState","React","Component"],"mappings":"8KASQA,E,4JAEJC,MAAQ,CACNC,UAAY,GACZC,UAAY,CACVC,MAAQ,IAEVC,YAAc,CACZF,UAAY,IAEdG,SAAW,K,EAEbC,SAAW,SAACC,EAAGC,GACb,IACE,OAAOD,IACP,MAAOE,GACP,OAAOD,I,EASXE,WAAa,WACX,IAAIN,EAAc,EAAKJ,MAAMI,YACvBO,EAAQ,EAAKL,UAAS,kBAAKM,SAASC,cAAc,oBAAiB,GACtEF,IACDP,EAAYF,UAAY,CACtBY,EAAIH,EAAMI,aAGZ,EAAKC,SAAS,CAACZ,gBAAa,WAE1B,EAAKa,Y,EAIXA,KAAO,WACL,IAAMN,EAAQ,EAAKX,MAAME,UACzBS,EAAMR,MAAQ,CACZe,OAAS,EAAKlB,MAAMI,YAAYF,UAAUY,GAE5C,EAAKE,SAAS,CAACL,W,oHAzBjBQ,kBAAA,WAAoB,IAAD,OACjBC,OAAOC,iBAAiB,UAAU,WAChC,EAAKX,gBAEPY,KAAKZ,c,EA6BTa,OAAA,WAAS,IAAD,OAEN,OACA,kBAAC,IAAD,CACAC,MAAK,aAwCJD,OAAQ,SAAAE,GAAS,IAAD,EACRD,EAAQC,EAAKC,iBAAiBC,MAyC3C,OACI,kBAAC,MAAD,GAGAC,MAAM,EAENvB,SAAU,EAAKL,MAAMK,SACrBwB,WAAY,GACZC,WAAW,EACXL,KA9CM,wBAAIM,UAAU,iBAEbP,EAAMQ,KAAI,SAACC,EAAMC,GAEhB,IAAMC,EAAOF,EAAKG,KAAKC,SAASC,MAAMC,MAAMC,MAAQP,EAAKG,KAAKC,SAASC,MAAMC,MAAMC,MAAtE,GAMf,OACE,wBAAIT,UAAU,eAAeU,IAAKR,EAAKG,KAAKM,GAAIvC,MAAO,EAAKH,MAAME,UAAUC,OAC1E,kBAAC,IAAD,CAAMwC,GAAE,IAAMV,EAAKG,KAAKQ,KAAKC,SAE7B,yBAAKd,UAAU,sBACb,yBAAKA,UAAU,sBAGb,kBAAC,IAAD,CAAOU,IAAKP,EAAGH,UAAU,oBAAoBS,MAAOL,IACpD,yBAAKJ,UAAU,mBACb,yBAAKA,UAAU,mBACb,uBAAGA,UAAU,gBACX,0BAAMA,UAAU,eAAeE,EAAKG,KAAKU,YAAgBb,EAAKG,KAAKU,YAAYC,MAAhD,UAC/B,0BAAMhB,UAAU,iBAAiBE,EAAKG,KAAKW,QAE7C,uBAAGhB,UAAU,kBAAkBE,EAAKG,KAAKY,OAAOD,MAAUd,EAAKG,KAAKY,OAAOD,MAA5C,oBAajD,WASW,EATX,EAUAE,UAAa,EAAKjD,MAVlB,GAcE,kBAAC,IAAD,CAAK+C,MAAM,WAlGb,U,GAvDsBG,IAAMC,WAmKjBpD,a","file":"component---src-pages-index-js-b5658f81fa883257c667.js","sourcesContent":["import React from \"react\"\nimport {StaticQuery, graphql, Link } from \"gatsby\"\nimport Image from 'gatsby-image'\nimport Layout from \"../components/layout\"\n// import Image from \"../components/image\"\nimport SEO from \"../components/seo\"\n\n\n// const IndexPage = ( props) => (\n  class IndexPage extends React.Component{\n\n    state = {\n      bodyClass : '',\n      thumbnail : {\n        style : {}\n      },\n      dimmensions : {\n        thumbnail : {}\n      },\n      homeLink : \"/\"\n    }\n    checkVar = (a, b) => {\n      try{\n        return a()\n      } catch (e) {\n        return b\n      }\n    }\n    componentDidMount(){\n      window.addEventListener('resize', ()=>{\n        this.handleDims()\n      });\n      this.handleDims()\n    }\n    handleDims = () =>{\n      let dimmensions = this.state.dimmensions;\n      const thumb = this.checkVar(()=> document.querySelector(\".project-link\"),false);\n      if(thumb){\n        dimmensions.thumbnail = {\n          w : thumb.offsetWidth\n        }\n        // console.log(\"dimsHandled\")\n        this.setState({dimmensions},()=>{\n          //dimmension dependent callbacks\n          this.wToH()\n        })\n      }\n    }\n    wToH = () => {\n      const thumb = this.state.thumbnail;\n      thumb.style = {\n        height : this.state.dimmensions.thumbnail.w\n      }\n      this.setState({thumb})\n      // console.log(\"wtoh\")\n      // return style\n      // console.log(this.state)\n    }\n\n\n\n  render(){\n\n    return (\n    <StaticQuery\n    query={graphql`\n      {\n        allSanityProject {\n          edges {\n            node {\n              imgImage {\n                _key\n                _type\n                local {\n                  asset {\n                    fluid{\n                      ...GatsbySanityImageFluid\n                    }\n                  }\n                }\n              }\n              imgGallery {\n                _key\n                _type\n                caption\n              }\n              id\n              title\n              slug {\n                _key\n                _type\n                current\n              }\n              projectType {\n                title\n              }\n              client {\n                title\n              }\n            }\n          }\n        }\n      } \n      `}\n  \n     render={data => {\n       const query = data.allSanityProject.edges\n       \n       const PortfolioGrid = () => {\n        return(\n          <ul className=\"project-index\">\n\n          {query.map((item, i)=>{\n            // const img  = item.node.imgImage ? item.node.imgImage.local.asset.url : ``;\n            const img  = item.node.imgImage.local.asset.fluid ? item.node.imgImage.local.asset.fluid : ``;\n\n            \n            // console.log(img2.local)\n\n            // thumbnail component will go here\n          return(\n            <li className=\"project-link\" key={item.node.id} style={this.state.thumbnail.style}>\n              <Link to={`/${item.node.slug.current}`}>\n\n              <div className=\"project-link-outer\">\n                <div className=\"project-link-inner\">\n                {/* {node.imgImage.local.asset.url} */}\n                  {/* <img src={img} alt=\"\" className=\"project-thumbnail\"/> */}\n                  <Image key={i} className=\"project-thumbnail\" fluid={img}/>\n                  <div className=\"text-wrap-outer\">\n                    <div className=\"text-wrap-inner\">\n                      <p className=\"project-text\">\n                        <span className=\"project-cat\">{item.node.projectType? `${item.node.projectType.title} : ` : ``}</span>\n                        <span className=\"project-title\">{item.node.title}</span>\n                      </p>\n                      <p className=\"project-client\">{item.node.client.title? `${item.node.client.title} ` : ``}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              </Link>\n            </li>\n          )})}\n      </ul>\n      )\n      }\n\nreturn(\n    <Layout\n    // pathname={window.location.pathname}\n    // search={window.location.search}\n    home={true}\n    // bodyClass={'home'}\n    homeLink={this.state.homeLink}\n    taxonomies={\"\"}\n    coverPage={true}\n    data={PortfolioGrid()}\n    coverPage={true}\n    pageState = {this.state}\n    >\n\n      \n      <SEO title=\"Home\" />\n\n  </Layout>\n)\n     }}\n  />\n    )\n    }\n}\n\nexport default IndexPage\n\n\n"],"sourceRoot":""}